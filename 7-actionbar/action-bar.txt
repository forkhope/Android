#### Settingup the Action Bar ####
In its most basic form, the action bar displays the title for the activity
and the app icon on the left.
Setting up a basic action bar requires that your app use an activity theme
that enables the action bar. How to request such a theme depends on which
version of Android is the lowest supported by your app.

--> Support Android 3.0 and Above Only
Beginning with Android 3.0 (API level 11), the action bar is included in
all activities that use the Theme.Holo theme (or one of its descendants),
which is the default theme when either the targetSdkVersion or
minSdkVersion attribute is set to "11" or greater.
So to add the action bar to your activities, simple set either attribute
to 11 or higher. For example:
    <manifest ...>
        <uses-sdk android:minSdkVersion="11" ... />
    </manifest>
    Note: If you've created a custom theme, be sure it uses one of the
          Theme.Holo themes as its parent.
Now the Theme.Holo theme is applied to your app and all activities show the
action bar. That's it. 如上所述,当 minSdkVersion 或者 targetSdkVersion 的任
意一个的值大于或等于 "11" 时,就会自动添加Action Bar. 实际验证发现,此时添加
的Action Bar的主题是 Theme.Holo 类型.

如上所述, Theme.Holo 类型默认就带有Action Bar.如果想默认不带Action Bar,可
以设置为android:theme="@android:style/Theme.Holo.NoActionBar".

--> Support Android 2.1 and Above
Adding the action bar when running on versions older than Android (3.0)
(down to Android 2.1) requires that you include the Android Support
Library in your application. 对于这种情况,不做过多描述.

#### Adding Action Buttons ####
The action bar allows you to add buttons for the most important action
items relating to the app's current context. Those that appear directly in
the action bar with an icon and/or text are known as action buttons.
Actions that can't fit in the action bar or aren't important enough are
hidden in the action overflow.

--> Specify the Actions in XML
All action buttons and other items available in the action overflow are
defined in an XML menu resource. To add actions to the action bar, create
a new XML in your project's "res/menu" directory.
Add an <item> element for each item you want to include in the action bar.
For example: "res/menu/main_activity_actions.xml":
<menu xmlns:android="http://schemas.android.com/apk/res/android" >
    <!-- Search, should appear as action button -->
    <item android:id="@+id/action_search"
          android:icon="@drawable/ic_action_search"
          android:title="@string/action_search"
          android:showAsAction="ifRoom" />
    <!-- Settings, should always be in the overflow -->
    <item android:id="@+id/action_settings"
          android:title="@string/action_settings"
          android:showAsAction="never" />
</menu>
This declares that the Search action should appear as an action button when
room is available in the action bar, but the Settings action should always
appear in the overflow. (By default, all actions appear in the overflow,
but it's good practice to explicitly declare your design intentions for
each action). 从这段描述以及实际执行结果来看,点击"overflow"按钮,会弹出来一
个下拉菜单,里面有一项就是"action_settings"这个项,,该项所显示的内容也正好是
"@string/action_settings"这个项所对应的字符串.如果该字符串定义为"Settings",
则显示的就是"Settings". 而"action_search"所定义的那个"android:title"不会显
示出来,如果要在Action Bar上看到这个title的值,需要为"android:showAsAction"
添加上"withText"属性.例如android:showAsAction="ifRoom|withText".注意: 如果
直接写为android:showAsAction="withText",那么这个项将会被放到overflow里面.
如前所述,不加"ifRoom"时,其默认就是显示在overflow中).

android:showAsAction可能的取值为:
    ["ifRoom" | "never" | "withText" | "always" | "collapseActionView"]
注意: 这些取值可以使用 '|' 组合在一起,以指定多个属性值.描述如下:
android:showAsAction: Specify when and how this item should appear as an
action item in the Action Bar. A menu item can appear as an action item
only then the activity includes an ActionBar (introduced in API level 11).
Valid values:
(1) ifRoom: Only place this item in the Action Bar if there is room for it.
(2) withText: Also include the title text (defined by android:title) with
the action item. You can include this value along with one of the others as
a flag set, by separating them with a pipe |.
(3) never: Never place this item in the Action Bar.
(4) always: Always place this item in the Action Bar. Avoid using this
unless it's critical that the item always appear in the action bar. Setting
multiple items to always appear as action items can result in them
overlapping with other UI in the action bar.
(5) collapseActionView: The action view associated with this action item (
as declared by android:actionLayout or android:actionViewClass) is
collapsible. Introduced in API Level 14.

The icon attribute requires a resource ID for an image. The name that
follows @drawable/ must be the name of a bitmap image you've saved in your
project's res/drawable/ directory. For example,"@drawable/ic_action_search"
refers to "ic_action_search.png". Likewise, the title attribute uses a
string resource that's defined by an XML file in your project's
"res/values" directory.
Note: When creating icons and other bitmap images for your app, it's
important that you provide multiple versions that are each optimized for a
different screen density.

即,为了让上面的xml文件能编译通过,还需要进行下面几个步骤:
(1)在"res/drawable"或者"res/drawable-*"目录下添加名为"ic_action_search.png"
的文件,使上面的"android:icon"能够找到该资源文件.
(2)在"res/values/strings.xml"文件中添加"action_search"和"action_settings"
的定义,使上面的"android:title"能够找到对应的字符串资源.例如:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="action_search">Search</string>
    <string name="action_settings">Just For Setting</string>
</resources>

--> Add the Actions to the Action Bar
To place the menu items into the action bar, implement the
onCreateOptionsMenu() callback method in your activity to inflate the menu
resource into the given Menu object. For example:
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu items for use in the action bar
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_activity_actions, menu);
        return super.onCreateOptionsMenu(menu);
    }
上面的R.menu.main_activity_actions关联到res/menu/main_activity_actions.xml
文件,就是通过这种方式来导入该xml文件所定义的项.

--> Respond to Action Buttons
When the user presses one of the action buttons or another item in the
action overflow, the system calls your activity's onOptionsItemSelected()
callback method. In your implementation of this method, call getItemId() on
the given MenuItem to determine which item was pressed -- the returned ID
matches the value you declared in the corresponding <item> element's
"android:id" attribute. For example:
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle presses on the action bar items
        switch (item.getItemId()) {
            case R.id.action_search:
                openSearch();
                return true;
            case R.id.action_settings:
                openSettings();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }
代码中,还需要实现 openSearch() 和 openSettings() 这两个函数,根据实际需要
实现即可,如果只是作为测试用,可以实现为空函数,或者打印一些log也行:
    public void openSearch() {
        // do something
    }
    public void openSettings() {
        // do something
    }
另外,编译的时候,需要导入相应的包.如下:
    import android.view.MenuItem;
    import android.view.Menu;
    import android.view.MenuInflater;

--> Add Up Button for Low-level Activities
All screens in your app that are not the main entrance to your app (
activities that are not the "home" screen) should offer the user a way to
navigate to the logical parent screen in the app's hierarchy by pressing
the UP button in the action bar.
When running on Android 4.1 (API level 16) or higher, or when using
ActionBarActivity from the Support Library, performing Up navigation simply
requires that you declare the parent activity in the manifest file and
enable the Up button the action bar. For example, here's how you can
declare an activity's parent in the manifest:
<application ... >
    ...
    <!-- The main/home activity (it has no parent activity) -->
    <activity
        android:name="com.example.myfirstapp.MainActivity" ...>
        ...
    </activity>
    <!-- A child of the main activity -->
    <activity
        android:name="com.example.myfirstapp.DisplayMessageActivity"
        android:label="@string/title_activity_display_message"
        android:parentActivityName="com.example.myfirstapp.MainActivity" >
        <!-- Parent activity meta-data to support 4.0 and lower -->
        <meta-data
            android:name="android.support.PARENT_ACTIVITY"
            android:value="com.example.myfirstapp.MainActivity" />
    </activity>
</application>
所以,在AndroidManifest.xml文件中声明"android:parentActivityName"属性以及
那个<meta-data>标签,就是为了能用Up按钮导航.

Enable the app icon as the Up button by calling setDisplayHomeAsUpEnabled():
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_displaymessage);
        // For minSdkVersion is 11 or higher:
        getActionBar().setDisplayHomeAsUpEnabled(true);
    }
Because the system now knows MainActivity is the parent activity for
DisplayMessageActivity, when the user presses the Up button, the system
navigates to the parent activity as appropriate -- you do not need to
handle the Up button's event.
目前认为,上面的 onCreate() 函数指的是DisplayMessageActivity.java中的
onCreate()函数. 实际验证发现,即使不执行setDisplayHomeAsUpEnabled()函数也没
有关系,进入DisplayMessageActivity对应的界面后,还是能看到Up按钮.如果执行的是
setDisplayHomeAsUpEnabled(false)语句,那么就会看不到Up按钮.由此猜测,不调用该
函数的情况下,其默认值就是true,即默认会显示Up按钮.

#### Styling the Action Bar ####
If you want to style the action bar to better fit your product brand, you
can easily do so using Android's style and theme resources.
Android includes a few built-in activity themes that include "dark" or
"light" action bar styles. You can also extend these themes to further
customize the look for your action bar.

--> Use an Android Theme
Android includes two baseline activity themes that dictate the color for
the action bar:
    (1) Theme.Holo for a "dark" theme.
    (2) Theme.Holo.Light for a "light" theme.
You can apply these themes to your entire app or to individual activities
by declaring them in your manifest file with the "android:theme" attribute
for the <application> element or individual <activity> elements.
For example:
    <application android:theme="@android:style/Theme.Holo.Light" ... />
You can also use a dark action bar while the rest of the activity uses the
light color scheme by declaring the Theme.Holo.Light.DarkActionBar theme.

--> Customize the Background
To change the action bar background, create a custom theme for your
activity that overrides the actionBarStyle property. This property points
to another style in which you can override the background property to
specify a drawable resource for the action bar background.
If your app uses navigation tabs or the split action bar, then you can also
specify the background for these bars using the backgroundStacked and
backgroundSplit properties, respectively.
  Caution: It's important that you declare an appropriate parent theme from
  which your custom theme and style inherit their styles. Without a parent
  style, your action bar will be without many style properties unless you
  explicitly declare them yourself.

For Android 3.0 and higher only
When supporting Android 3.0 and higher only, you can define the action
bar's background like this: "res/values/themes.xml"
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <!-- the theme applied to the application or activity -->
  <style name="CustomActionBarTheme"
         parent="@android:style/Theme.Holo.Light.DarkActionBar">
      <item name="android:actionBarStyle">@style/MyActionBar</item>
  </style>

  <!-- ActionBar styles -->
  <style name="MyActionBar"
         parent="@android:style/Widget.Holo.Light.ActionBar.Solid.Inverse">
      <item name="android:background">@drawable/actionbar_background</item>
  </style>
</resources>
Then apply your theme to your entire app or individual activities:
    <application android:theme="@style/CustomActionBarTheme" ... />
为了让上面的xml文件能编译通过,需要在"res/drawable"目录下添加一个名为
"actionbar_background.png"的文件,以作为背景色使用,该图片一般是纯色的.也可以
直接将上面的"android:background"指定为纯色(#EE0000表示红色),如下:
    <item name="android:background">#EE0000</item>
实际验证发现,<style name="MyActionBar">中的parent属性必须指定ActionBar.例
如parent="@android:style/Widget.Holo.ActionBar", parent="@android:style/
Widget.Holo.Light.ActionBar".如果只写为parent="@android:style/Widget.Holo",
运行时发现, Action Bar上会看不到内容.原因应该跟上面的"Caution"有关,即没有
适当地继承父类theme,导致丢失了很多样式属性(style properties).

--> Customize the Text Color
To modify the color of text in the action bar, you need to override
separate properties for each text element:
(1) Action bar title: Create a custom style that specifies the textColor
property and specify that style for the titleTextStyle property in your
custom actionBarStyle. Note: The custom style applied to titleTextStyle
should use TextAppearance.Holo.Widget.ActionBar.Title as the parent style.
(2) Action bar tabs: Override actionBarTabTextStyle in your activity theme.
(3) Action buttons: Override actionMenuTextColor in your activity theme.

For Android 3.0 and higher only: When supporting Android 3.0 and higher
only, your style XML file might look like this:
"res/values/themes.xml"
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <!-- the theme applied to the application or activity -->
  <style name="CustomActionBarTheme"
      parent="@android:style/Theme.Holo">
      <item name="android:actionBarStyle">@style/MyActionBar</item>
      <item name="android:actionMenuTextColor">@color/actionbar_text</item>
  </style>

  <!-- ActionBar styles -->
  <style name="MyActionBar"
      parent="@android:style/Widget.Holo.ActionBar">
      <item name="android:background">@drawable/actionbar_background</item>
      <item name="android:titleTextStyle">@style/MyActionBarTitleText</item>
  </style>

  <!-- ActionBar title text -->
  <style name="MyActionBarTitleText"
      parent="@android:style/TextAppearance.Holo.Widget.ActionBar.Title">
      <item name="android:textColor">@color/actionbar_text</item>
  </style>
</resources>
另外,为了让这个XML能编译通过,还需要添加一个"res/values/colors.xml"文件,添
加上面的"@color/actionbar_text"定义,让该值对应一种颜色的值即可:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="actionbar_text">#ff0000</color>
</resources>

--> Customize the Tab Indicator
在"developer.android.com/training/basics/actionbar/styling.html#CustomTabs"
中有所描述.对于这部分内容,有待验证.

#### Overlaying the Action Bar ####
By default, the action bar appears at the top of your activity window,
slightly reducing the amount of space available for the rest of your
activity's layout. If you want to hide and show the action bar, you can do
so by calling hide() and show() on the ActionBar. However, this causes your
activity to recompute and redraw the layout based on its new size.
代码中,可以调用getActionBar()函数来获取ActionBar对象,则getActionBar().hide()
语句会隐藏Action Bar,而getActionBar().show()语句会显示Action Bar.

To avoid resizing your layout when the action bar hides and shows, you can
enable overlay mode for the action bar. When in overlay mode, your activity
layout uses all the space available as if the action bar is not there and
the system draws the action bar in front of your layout. This obscures some
of the layout at the top, but now when the action bar hides or appears, the
system does not need to resize your layout and the transition is seamless.
    Tip: If you want your layout to be partially visible behind the action
    bar, create a custom style for the action bar with a partially
    transparent background.

--> Enable Overlay Mode
To enable overlay mode for the action bar, you need to create a custom
theme that extends an existing action bar theme and set the
"android:windowActionBarOverlay" property to "true".

For Android 3.0 and higher only: If you minSdkVersion is set to 11 or
higher, your custom theme should use Theme.Holo theme (for one of its
descendants) as your parent theme. For example:
<resources>
    <!-- the theme applied to the application or activity -->
    <style name="CustomActionBarTheme"
           parent="@android:style/Theme.Holo">
        <item name="android:windowActionBarOverlay">true</item>
    </style>
</resources>

--> Specify Layout Top-margin
When the action bar is in overlay mode, it might obscure some of your
layout that should remain visible. To ensure that such items reamin below
the action bar at all times, add either margin or padding to the top of
the view(s) using the height specified by actionBarSize. For example:
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingTop="?android:attr/actionBarSize">
    ...
</RelativeLayout>
实际验证,使用这种方式所定义的组件将会显示在Action Bar的下面.此时,隐藏Action
Bar之后,上面残留一份空白区域.原先Action Bar下面的组件不会提升到界面的上方.
这种方式和不使用Overlay Mode模式时的区别在于: 不使用Overlay Mode模式时,组件
也是显示在Action Bar的下方,但是隐藏Action Bar时,组件会提升到界面的最上方.
