#### Supporting Different Languages ####
It's always a good practice to extract UI strings from your app code and
keep them in an external file. Android makes this easy with a resources
directory in each Android project.
If you created your project using the Android SDK Tools, the tools create
a "res/" directory in the top level of the project. Within this "res/"
directory are subdirectories for various resource types. There are also a
few default files such as "res/values/string.xml", which holds your string
values.

--> Create Locale Directories and String Files
To add support for more languages, create additional "values" directories
inside "res/" that include a hyphen and the ISO language code at the end of
the directory name. For example, "values-es" is the directory containing
simple resources for the Locales with the language code "es". Android loads
the appropriate resources according to the locale settings of the device at
run time.

Once you've decided on the languages you will support, create the resource
subdirectories and string resource files. For example:
    MyProject/
        res/
            values/
                strings.xml
            values-es/
                strings.xml
            values-fr/
                strings.xml
Add the string values for each locale into the appropriate file.

At runtime, the Android system uses the appropriate set of string resources
based on the locale currently set for the user's device.
For example, the following are some different string resource files for
different languages.
    English (default locale), "res/values/strings.xml":
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="title">My Application</string>
        </resources>
    Spanish, "res/values-es/strings.xml":
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="title">Mi Aplicación</string>
        </resources>
Note: You can use the locale qualifier (or any configuration qualifier) on
any resource type, such as if you want to provide localized versions of
your bitmap drawable.

--> Use the String Resources
You can reference your string resources in your source code and other XML
files using the resource name defined by the "<string>" element's "name"
attribute.

In your source code, you can refer to a string resource with the syntex
"R.string.<string_name>". There are a variety methods that accept a string
resource this way. For example:
    // Get a string resource from your app's Resources
    String hello = getResources().getString(R.string.hello_world);

    // Or supply a string resource to a method that requires a string
    TextView textView = new TextView(this);
    textView.setText(R.string.hello_world);
代码中,资源对象是由一个独一无二地整数值来表示."R.string.hello_world"实际上
就是一个 int 型的值.查看编译生成的 "R.java" 就能看到这一点.所以,想要在代码
中引用资源对象时,对应的函数需要接收一个整型参数.我们不能直接引用"R.string.
hello_world"来为String对象赋值.下面的语句是错误的:
    String hello = R.string.hello_world;    // WRONG
另外,上面调用的getResources()函数是Context类的抽象函数,Activity类继承自
ContextThemeWrapper类,该类实现了这个函数,其函数原型以及说明如下:
    public Resources getResources()
        Return a Resources instance for your application's package.

In other XML files, you can refer to a string resource with the syntax
"@string/<string_name>" whenever the XML attribute accepts a string value.
For example:
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world" />

--> values-zh, values-zh-rCN, values-zh-rHK, values-zh-rTW
进入Android系统的"设置"-"语言和输入法"-"语言"界面,可以看到里面有三个关于中
文的设置项: 中文(繁体), 中文(简体), 中文(香港).相应的,代码中有三个字符串目
录对应这三个项.除此之外,还有一个通用的中文字符串目录,描述如下:
    values-zh:  通用的中文字符串目录,可能会被后三个目录的内容所覆盖
    values-zh-rCH: 语言选择为"中文(简体)"时所加载的字符串目录
    values-zh-rTW: 语言选择为"中文(繁体)"时所加载的字符串目录
    values-zh-rHK: 语言选择为"中文(香港)"时所加载的字符串目录

当代码中只添加了"values-zh"目录时,不管语言选择为"中文(简体)","中文(繁体)",
还是"中文(香港)",都会加载"values-zh"目录中的字符串.所以称之为通用中文目录.

而"values-zh-rCN", "values-zh-rTW", 和"values-zh-rHK"类似于"values-zh"的子
类,当添加了这三个目录任意一个时,会覆盖"values-zh"的定义. 举例如下:
(1)代码中添加了"values-zh"和"values-zh-rHK"目录时,将语言设置为"中文(繁体)"
和"中文(简体)"会加载"values-zh"目录的字符串,将语言设置为"中文(香港)"会加载
"values-zh-rHK"目录的字符串.
(2)代码中只添加了"values-zh-rHK"目录时,将语言设置为"中文(繁体)"和"中文(简
体)"会加载"value"目录的字符串(即默认的英语),将语言设置为"中文(香港)"时会
加载"value-zh-rHK"目录的字符串.即,"values-zh-rHK"目录只对应"中文(香港)".
(3)代码中添加"values-zh", "values-zh-rCN", "values-zh-rHK", "values-zh-rTW"
目录时,将语言设置为"中文(简体)"会加载"values-zh-rCN"目录的字符串,将语言设
置为"中文(繁体)"会加载"values-zh-rTW"目录的字符串,将语言设置为"中文(香港)"
会加载"values-zh-rHK"目录的字符串.此时,"values-zh"的字符串不会被用到.

#### Supporting Different Screens ####
Android categorizes device screens using two general properties: size and
density. You should include some alternative resources that optimize your
app's appearance for different screen sizes and densities.
(1) There are four generalized sizes: small, normal, large, xlarge
(2) And four generalized densities: low (ldpi), medium (mdpi), high (hdpi),
    extra high (xhdpi)

To declare different layouts and bitmaps you'd like to use for different
screens, you must place these alternative resources in separate
directories, similar to how you do for different language strings.

Also be aware that the screens orientation (landscape or portrait) is
considered a variation of screen size, so many apps should revise the
layout to optimize the user experience in each orientation.

--> Create Different Layouts
To optimize your user experience on different screen sizes, you should
create a unique layout XML file for each screen size you want to support.
Each layout should be saved into the appropriate resources directory, named
with a "-<screen_size>" suffix. For example, a unique layout for large
screens should be saved under "res/layout-large/".
Note: Android automatically scales your layout in order to properly fit the
screen. Thus, your layouts for different screen don't need to worry about
the absolute size of UI elements but instead focus on the layout structure
that affects the user experience (such as the size or position of important
views relative to sibling views).

For example, this project includes a default layout and an alternative
layout for large screens:
    MyProject/
        res/
            layout/
                main.xml
            layout-large/
                main.xml
The file names must be exactly the same, but their contents are different
in order to provide an optimized UI for the corresponding screen size.
Simply reference the layout file in your app as usual:
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }
The system loads the layout file from the appropriate layout directory
based on screen size of the device on which your app is running.

As another example, here's a project with an alternative layout for
landscape orientation:
    MyProject/
        res/
            layout/
                main.xml
            layout-land/
                main.xml
By default, the "layout/main.xml" file is used for portrait orientation.

If you want to provide a special layout for landscape, including while on
large screens, then you need to use both the large and land qualifier:
    MyProject/
        res/
            layout/              # default (portrait)
                main.xml
            layout-land/         # landscape
                main.xml
            layout-large/        # large (portrait)
                main.xml
            layout-large-land/   # large landscape
                main.xml
Note: Android 3.2 and above supports an advanced method of defining screen
size that allows you to specify resources for screen size based on the
minimum width and height in terms of density-independent pixels.

--> Create Different Bitmaps
You should always provide bitmap resources that are properly scaled to each
of the generalized density buckets: low, medium, high and extra-high
density. This helps you achieve good graphical quality and performance on
all screen densities. To generate these images, you should start with your
raw resource in vector format and generate the images for each density
using the following size scales:
    (1) xhdpi: 2.0
    (2) hdpi: 1.5
    (3) mdpi: 1.0 (baseline)
    (4) ldpi: 0.75
This means that if you generate a 200x200 image for xhdpi devices, you
should generate the same resource in 150x150 for hdpi, 100x100 for mdpi,
and 75x75 for ldpi devices.
Then, place the files in the appropriate drawable resource directory:
    MyProject/
        res/
            drawable-xhdpi/
                awesomeimage.png
            drawable-hdpi/
                awesomeimage.png
            drawable-mdpi/
                awesomeimage.png
            drawable-ldpi/
                awesomeimage.png
Any time you reference "@drawable/awesomeimage", the system selects the
appropriate bitmap based on the screen's density.
Note: Low-density (ldpi) resources aren't always necessary. When you
provide hdpi assets, the system scales them down by one half of properly
fit ldpi screens.

#### Supporting Different Platform Versions ####
While the latest versions of Android often provide great APIs for your app,
you should continue to support older versions of Android until more devices
get updated. In order to provide the best features and functionality across
several Android versions, you should use the "Android Support Library" in
your app, which allows you to use several recent platform APIs on older
versions.

--> Specify Minimum and Target API Levels
The AndroidManifest.xml file describes details about yoru app and
identifies which versions of Android it supports. Specifically, the
"minSdkVersion" and "targetSdkVersion" attributes for the "uses-sdk"
element identify the lowest API level with which your app is compatible and
the highest API level against which you've designed and tested your app.
For example:
<manifest xmlns:android="http://schemas.android.com/apk/res/android" ... >
    <uses-sdk android:minSdkVersion="4" android:targetSdkVersion="15" />
    ...
</manifest>
As new versions of Android are released, some style and behaviors may
change. To allow your app to take advantage of these changes and ensure
that your app fits the style of each user's device, you should set the
"targetSdkVersion" value to match the latest Android version available.

--> Check System Version at Runtime
Android provides a unique code for each platform version in the "Build"
constants class. Use these codes within your app to build conditions that
ensure the code that depends on higher API levels is executed only when
those APIs are available on the system.
private void setUpActionBar() {
    // Make sure we're running on Honeycomb or higher to use ActionBar APIs
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
        ActionBar actionBar = getActionBar();
        actionBar.setDisplayHomeAsUpEnabled(true);
    }
}
Note: When parsing XML resources, Android ignores XML attributes that
aren't supported by the current device. So you can safely use XML
attributes that are only supported by newer versions without worrying about
older versions breaking when they encounter that code. For example, if you
set the targetSdkVersion="11", your app includes the ActionBar by default
on Android 3.0 and higher. To then add menu items to the action bar, you
need to set android:showAsAction="ifRoom" in your menu resource XML. It's
safe to do this in a cross-version XML file, because the older versions of
Android simply ignore the showAsAction attribute (this is, you do not need
a separate version in "res/menu-v11/").

--> Use Platform Styles and Themes
Android provides user experience themes that give apps the look and feel of
the underlying operating system. These themes can be applied to your app
within the manifest file. By using these built in styles and themes, your
app will naturally follow the latest look and feel of Android with each new
release.
To make your activity look like a dialog box:
    <activity android:theme="@android:style/Theme.Dialog">
实际运行的时候,会弹出一个对话框窗口,悬浮在应用列表界面上,而不是全屏显示.
To make your activity have a transparent background:
    <activity android:theme="@android:style/Theme.Translucent">
默认背景色是黑色,这样设置后,背景色变成透明,会看到底下的应用列表界面.
To apply your own custom theme defined in "res/values/styles.xml":
    <activity android:theme="@style/CustomTheme">
To apply a theme to your entire app (all activities), add the
"android:theme" attribute to the "<application>" element:
    <application android:theme="@style/CustomTheme">
